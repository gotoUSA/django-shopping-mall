# ==============================================
# Django 기본 설정
# ==============================================
# 시크릿 키 (프로덕션에서는 반드시 변경!)
# 생성 방법: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
DJANGO_SECRET_KEY=django-insecure-change-this-secret-key-in-production

# 디버그 모드 (프로덕션: False, 개발: True)
DJANGO_DEBUG=True

# 허용된 호스트 (콤마로 구분, 프로덕션에서는 실제 도메인 추가)
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1

# ==============================================
# 데이터베이스 설정
# ==============================================
# 데이터베이스 엔진 설정
# SQLite: django.db.backends.sqlite3
# PostgreSQL: django.db.backends.postgresql
# MySQL: django.db.backends.mysql

# 로컬 개발 환경 (SQLite 사용시 아래 설정들은 불필요)
# DATABASE_ENGINE=django.db.backends.sqlite3

# PostgreSQL 설정 (로컬 또는 Docker)
DATABASE_ENGINE=django.db.backends.postgresql
DATABASE_NAME=shopping_db
DATABASE_USER=shopping_user
DATABASE_PASSWORD=your-database-password-here

# 로컬 환경: localhost
# Docker 환경: db (docker-compose.yml의 서비스명)
DATABASE_HOST=localhost
DATABASE_PORT=5432

# ==============================================
# Redis & Celery 설정
# ==============================================
# Redis URL 설정
# 로컬 환경: redis://localhost:6379/0
# Docker 환경: redis://redis:6379/0 (docker-compose.yml의 서비스명)
# ⚠️ 주의: docker-compose.yml에서 Redis 외부 포트는 6373으로 설정되어 있습니다
#          로컬에서 Docker Redis 접근: redis://localhost:6373/0
REDIS_URL=redis://localhost:6379/0

# Celery 브로커 URL (Redis 사용)
CELERY_BROKER_URL=redis://localhost:6379/0

# Celery 결과 백엔드
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# ==============================================
# 토스페이먼츠 설정
# ==============================================
# 토스페이먼츠 대시보드에서 발급: https://developers.tosspayments.com/my/api-keys
# 테스트 키는 "test_"로 시작, 운영 키는 "live_"로 시작

# 클라이언트 키 (프론트엔드용)
TOSS_CLIENT_KEY=test_ck_YOUR_CLIENT_KEY_HERE

# 시크릿 키 (서버용, 절대 노출 금지!)
TOSS_SECRET_KEY=test_sk_YOUR_SECRET_KEY_HERE

# 웹훅 시크릿 (웹훅 서명 검증용)
# 대시보드 > 웹훅 > 웹훅 엔드포인트 추가 후 발급
TOSS_WEBHOOK_SECRET=YOUR_WEBHOOK_SECRET_HERE

# API 베이스 URL (기본값 사용 권장)
TOSS_BASE_URL=https://api.tosspayments.com

# ==============================================
# 프론트엔드 설정
# ==============================================
# 결제 완료/실패 후 리다이렉트할 프론트엔드 URL
# 로컬: http://localhost:3000
# 프로덕션: https://yourdomain.com
FRONTEND_URL=http://localhost:3000

# ==============================================
# 이메일 설정 (선택사항)
# ==============================================
# 이메일 백엔드 (개발 시 console, 운영 시 smtp)
# EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend  # 개발용
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend  # 운영용

# SMTP 설정 (Gmail 예시)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password  # Gmail 앱 비밀번호
DEFAULT_FROM_EMAIL=noreply@shopping.com

# ==============================================
# 테스트 계정 설정
# ==============================================
# 테스트 데이터 생성시 사용할 비밀번호
# python manage.py create_test_data 명령어 사용시
TEST_USER_PASSWORD=testpass123!
TEST_ADMIN_PASSWORD=admin123!

# 테스트 데이터 프리셋 (minimal/basic/full)
TEST_DATA_PRESET=basic

# ==============================================
# 소셜 로그인 설정 (OAuth Apps)
# ==============================================

# Google OAuth 2.0
# 발급 방법: https://console.cloud.google.com/apis/credentials
GOOGLE_CLIENT_ID=your_google_client_id_here
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# Kakao OAuth
# 발급 방법: https://developers.kakao.com/console/app
KAKAO_REST_API_KEY=your_kakao_rest_api_key_here
KAKAO_CLIENT_SECRET=your_kakao_client_secret_here

# Naver OAuth
# 발급 방법: https://developers.naver.com/apps/#/register
NAVER_CLIENT_ID=your_naver_client_id_here
NAVER_CLIENT_SECRET=your_naver_client_secret_here

# 소셜 로그인 리다이렉트 URI
# 개발: http://localhost:8000/social/test/
# 운영: https://yourdomain.com/auth/callback/
SOCIAL_LOGIN_REDIRECT_URI=http://localhost:8000/social/test/

# ==============================================
# 환경별 설정 가이드
# ==============================================
# 
# 📌 로컬 개발 환경 (SQLite + 로컬 Redis):
#   DATABASE_ENGINE=django.db.backends.sqlite3
#   REDIS_URL=redis://localhost:6379/0
#   CELERY_BROKER_URL=redis://localhost:6379/0
#
# 📌 로컬 개발 환경 (PostgreSQL + 로컬 Redis):
#   DATABASE_ENGINE=django.db.backends.postgresql
#   DATABASE_HOST=localhost
#   DATABASE_PORT=5432
#   REDIS_URL=redis://localhost:6379/0
#
# 📌 Docker Compose 환경:
#   DATABASE_ENGINE=django.db.backends.postgresql
#   DATABASE_HOST=db  # docker-compose.yml의 서비스명
#   DATABASE_PORT=5432
#   REDIS_URL=redis://redis:6379/0  # docker-compose.yml의 서비스명
#   CELERY_BROKER_URL=redis://redis:6379/0
#   ⚠️ 주의: 외부에서 Docker Redis 접근시 포트 6373 사용
#
# 📌 프로덕션 환경:
#   DJANGO_DEBUG=False
#   DATABASE_HOST=your-rds-endpoint.amazonaws.com
#   REDIS_URL=redis://your-elasticache-endpoint:6379/0
#   FRONTEND_URL=https://yourdomain.com
#   ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
#
# ==============================================