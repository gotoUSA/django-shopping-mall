name: Django CI

# 언제 실행할지 설정
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    # PostgreSQL 서비스 (테스트용)
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: shopping_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # 환경변수 설정 (job 레벨)
    env:
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_DEBUG: False
      DATABASE_ENGINE: django.db.backends.postgresql
      DATABASE_NAME: shopping_db
      DATABASE_USER: test_user
      DATABASE_PASSWORD: test_password
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      REDIS_URL: redis://localhost:6379/0
      CELERY_BROKER_URL: redis://localhost:6379/0
      CELERY_RESULT_BACKEND: redis://localhost:6379/0
      TOSS_CLIENT_KEY: test_ck_fake_key
      TOSS_SECRET_KEY: test_sk_fake_key
      TOSS_WEBHOOK_SECRET: test_webhook_secret


    steps:
    # 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4

    # Python 설정
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    # 의존성 설치
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt


    # 데이터베이스 마이그레이션
    - name: Run migrations
      run: |
        python manage.py migrate --noinput

    # 테스트 커버리지 측정
    - name: Run tests with coverage
      run: |
        pip install coverage pytest-cov
        pytest shopping/tests/ --cov=shopping --cov-report=xml --cov-report=term-missing -v

    # 코드 스타일 체크 (선택사항)
    - name: Lint with flake8
      run: |
        pip install flake8
        # 에러만 체크 (경고는 무시)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 복잡도 체크 (10 이상만)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
