"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

if not SECRET_KEY:
    raise ValueError(
        "❌ DJANGO_SECRET_KEY 환경변수가 설정되지 않았습니다!\n"
        ".env 파일을 생성하고 SECRET_KEY를 설정하세요.\n"
        "생성 방법: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'"
    )

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "TRUE") == "TRUE"

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "shopping",
    "mptt",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",  # 토큰 블랙리스트 앱
    "drf_yasg",
    "django_celery_beat",
    # 소셜 로그인 필수 앱
    "django.contrib.sites",  # allauth 필수
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # 소셜 로그인 제공자
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.kakao",
    "allauth.socialaccount.providers.naver",
    # REST API 소셜 인증
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    # Debug Toolbar
    "debug_toolbar",
]

AUTH_USER_MODEL = "shopping.User"

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "myproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myproject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 테스트 환경 감지
TESTING = "test" in sys.argv or os.getenv("TESTING") == "True"

# 데이터베이스 설정
DATABASES = {
    "default": {
        "ENGINE": os.getenv("DATABASE_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DATABASE_NAME", BASE_DIR / "db.sqlite3"),
        "USER": os.getenv("DATABASE_USER", ""),
        "PASSWORD": os.getenv("DATABASE_PASSWORD", ""),
        "HOST": os.getenv("DATABASE_HOST", ""),
        "PORT": os.getenv("DATABASE_PORT", ""),
        # 테스트: 연결 즉시 종료, 프로덕션: 재사용
        "CONN_MAX_AGE": 0 if TESTING else 600,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"  # collectstatic을 위해 필요

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 미디어 파일 설정 (ProductImage용)
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# REST Framework 기본 설정
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",  # 관리자 페이지
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # JWT
    ],
    # 권한 설정 (인증된 사용자만 API 사용 가능)
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",  # 읽기는 누구나, 쓰기는 로그인 필요
    ],
}

# JWT 설정
from datetime import timedelta

SIMPLE_JWT = {
    # 토큰 유효 시간 설정
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),  # Access Token: 30분
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # Refresh Token: 7일
    # 토큰 갱신 설정
    "ROTATE_REFRESH_TOKENS": True,  # Refresh Token 갱신 시 새로운 토큰 발급
    "BLACKLIST_AFTER_ROTATION": True,  # 이전 Refresh Token은 블랙리스트에 추가
    # 토큰 타입
    "AUTH_HEADER_TYPES": ("Bearer",),  # Authorization: Bearer <token>
    # 토큰 검증
    "ALGORITHM": "HS256",  # 암호화 알고리즘
    "SIGNING_KEY": SECRET_KEY,  # 서명에 사용할 키 (Django SECRET_KEY 사용)
    # 토큰에 포함될 정보
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    # 토큰 클레임 설정
    "JTI_CLAIM": "jti",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
}


# 토스페이먼츠 설정
#
# 토스페이먼츠 대시보드에서 발급받은 키를 환경변수로 설정하세요.
# https://developers.tosspayments.com/my/api-keys
#
# .env 파일 예시:
# TOSS_CLIENT_KEY=test_ck_...  # 클라이언트 키 (프론트엔드용)
# TOSS_SECRET_KEY=test_sk_...  # 시크릿 키 (서버용)
# TOSS_WEBHOOK_SECRET=...      # 웹훅 시크릿 (웹훅 서명 검증용)

# 토스페이먼츠 API 키
TOSS_CLIENT_KEY = os.environ.get("TOSS_CLIENT_KEY", "")  # 테스트 클라이언트 키
TOSS_SECRET_KEY = os.environ.get("TOSS_SECRET_KEY", "")  # 테스트 시크릿 키

# 토스페이먼츠 웹훅 시크릿 (웹훅 서명 검증용)
# 토스페이먼츠 대시보드 > 웹훅 > 웹훅 엔드포인트 추가 후 발급
TOSS_WEBHOOK_SECRET = os.environ.get("TOSS_WEBHOOK_SECRET", "")

# 토스페이먼츠 API URL
# 테스트: https://api.tosspayments.com
# 운영: https://api.tosspayments.com (동일)
TOSS_BASE_URL = os.environ.get("TOSS_BASE_URL", "https://api.tosspayments.com")

# 프론트엔드 URL (결제 완료/실패 후 리다이렉트)
FRONTEND_URL = os.environ.get("FRONTEND_URL", "http://localhost:3000")

# 로깅 설정 (결제 디버깅용)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "payment.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "shopping.views.payment_views": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "shopping.webhooks": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# ========== Celery 설정 추가 ==========

# Celery 브로커 설정 (Redis)
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "redis://localhost:6379/0")

# Celery 설정
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE  # Django 시간대와 동일하게 설정
CELERY_ENABLE_UTC = False  # 로컬 시간대 사용

# 테스트 환경에서 동기 실행
if TESTING:
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True

# Celery Beat 설정 (데이터베이스 스케줄러 사용)
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"


# ========== 데이터베이스 설정 수정 (Docker 사용 시) ==========

# 환경변수로 데이터베이스 설정 관리
if os.environ.get("DATABASE_ENGINE"):
    DATABASES = {
        "default": {
            "ENGINE": os.environ.get("DATABASE_ENGINE", "django.db.backends.sqlite3"),
            "NAME": os.environ.get("DATABASE_NAME", BASE_DIR / "db.sqlite3"),
            "USER": os.environ.get("DATABASE_USER", ""),
            "PASSWORD": os.environ.get("DATABASE_PASSWORD", ""),
            "HOST": os.environ.get("DATABASE_HOST", ""),
            "PORT": os.environ.get("DATABASE_PORT", ""),
        }
    }

# ========== 이메일 설정 (포인트 만료 알림용) ==========

# 이메일 백엔드 설정
EMAIL_BACKEND = os.environ.get(
    "EMAIL_BACKEND",
    "django.core.mail.backends.console.EmailBackend",  # 개발용: 콘솔에 출력
)

# SMTP 설정 (실제 이메일 발송 시)
if EMAIL_BACKEND == "django.core.mail.backends.smtp.EmailBackend":
    EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.gmail.com")
    EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))
    EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "TRUE") == "TRUE"
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
    DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "noreply@shopping.com")

# 프론트엔드 URL (이메일 링크용)
FRONTEND_URL = os.environ.get("FRONTEND_URL", "http://localhost:3000")


# ========== 캐시 설정 (Redis 사용) ==========

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.environ.get("REDIS_URL", "redis://127.0.0.1:6379/1"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# ========== 추가 로깅 설정 ==========

# Celery 관련 로깅 추가
LOGGING["loggers"]["celery"] = {
    "handlers": ["console", "file"],
    "level": "INFO",
    "propagate": False,
}

LOGGING["loggers"]["shopping.services"] = {
    "handlers": ["console", "file"],
    "level": "INFO",
    "propagate": False,
}

LOGGING["loggers"]["shopping.tasks"] = {
    "handlers": ["console", "file"],
    "level": "INFO",
    "propagate": False,
}

# 테스트 설정에서 동기 실행 강제


if "test" in sys.argv:
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True
    CELERY_BROKER_URL = "memory://"
    CELERY_RESULT_BACKEND = "cache+memory://"

# logs 디렉토리 생성
LOGS_DIR = BASE_DIR / "logs"
if not LOGS_DIR.exists():
    LOGS_DIR.mkdir()


# ==========================================
# 소셜 로그인 설정 (django-allauth 65.12+)
# ==========================================

# Django Sites Framework (allauth 필수)
SITE_ID = 1

# ========== allauth 기본 설정 ==========

ACCOUNT_SIGNUP_FIELDS = [
    "email*",  # * = 필수
    "username*",  # * = 필수
    "password1*",
    "password2*",
]

ACCOUNT_EMAIL_VERIFICATION = "none"  # 소셜 로그인은 자동 인증


ACCOUNT_LOGIN_METHODS = {"email"}  # set 타입


# ========== 소셜 로그인 설정 ==========
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_STORE_TOKENS = True
SOCIALACCOUNT_LOGIN_ON_GET = True

# ========== dj-rest-auth 7.0+ 설정 ==========
REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": False,  # 프론트엔드에서 토큰 직접 관리
    "JWT_AUTH_COOKIE": None,  # 쿠키 미사용
    "USER_DETAILS_SERIALIZER": "shopping.serializers.user_serializers.UserSerializer",
    "JWT_AUTH_COOKIE_USE_CSRF": False,
    "JWT_AUTH_SECURE": False,  # HTTPS 사용 시 True로 변경
    "JWT_AUTH_SAMESITE": "Lax",  # CSRF 보호
}

# JWT 토큰 모델 미사용 (SimpleJWT 사용)
REST_AUTH_TOKEN_MODEL = None
REST_AUTH_TOKEN_CREATOR = None

# allauth 어댑터 (기본값이지만 명시)
ACCOUNT_ADAPTER = "allauth.account.adapter.DefaultAccountAdapter"
SOCIALACCOUNT_ADAPTER = "allauth.socialaccount.adapter.DefaultSocialAccountAdapter"

# ========== 소셜 로그인 제공자별 설정 ==========
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "APP": {
            "client_id": os.getenv("GOOGLE_CLIENT_ID", ""),
            "secret": os.getenv("GOOGLE_CLIENT_SECRET", ""),
            "key": "",
        },
    },
    "kakao": {
        "APP": {
            "client_id": os.getenv("KAKAO_REST_API_KEY", ""),
            "secret": os.getenv("KAKAO_CLIENT_SECRET", ""),
            "key": "",
        },
    },
    "naver": {
        "APP": {
            "client_id": os.getenv("NAVER_CLIENT_ID", ""),
            "secret": os.getenv("NAVER_CLIENT_SECRET", ""),
            "key": "",
        },
    },
}


# Debug Toolbar 설정
if DEBUG:
    INTERNAL_IPS = [
        "127.0.0.1",
        "localhost",
    ]

    # Docker 환경에서도 작동하도록
    import socket

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS += [ip[: ip.rfind(".")] + ".1" for ip in ips]


# 소셜 로그인 리다이렉트 URI (프론트엔드)
SOCIAL_LOGIN_REDIRECT_URI = os.getenv("SOCIAL_LOGIN_REDIRECT_URI", "http://localhost:8000/social/test/")
